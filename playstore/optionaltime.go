// Code generated by go generate
// (and manually tweaked to add the correct imports...)
// This file was generated by robots at 2021-09-15 22:41:43.1450235 +0000 UTC

package playstore

import (
	"encoding/json"
	"errors"
	"time"
)

// OptionalTime is an optional time.Time.
type OptionalTime struct {
	value *time.Time
}

// NewOptionalTime creates an optional.OptionalTime from a time.Time.
func NewOptionalTime(v time.Time) OptionalTime {
	return OptionalTime{&v}
}

// Set sets the time.Time value.
func (o *OptionalTime) Set(v time.Time) {
	o.value = &v
}

// Get returns the time.Time value or an error if not present.
func (o OptionalTime) Get() (time.Time, error) {
	if !o.Present() {
		var zero time.Time
		return zero, errors.New("value not present")
	}
	return *o.value, nil
}

// Present returns whether or not the value is present.
func (o OptionalTime) Present() bool {
	return o.value != nil
}

// OrElse returns the time.Time value or a default value if the value is not present.
func (o OptionalTime) OrElse(v time.Time) time.Time {
	if o.Present() {
		return *o.value
	}
	return v
}

// If calls the function f with the value if the value is present.
func (o OptionalTime) If(fn func(time.Time)) {
	if o.Present() {
		fn(*o.value)
	}
}

func (o OptionalTime) MarshalJSON() ([]byte, error) {
	if o.Present() {
		return json.Marshal(o.value)
	}
	return json.Marshal(nil)
}

func (o *OptionalTime) UnmarshalJSON(data []byte) error {

	if string(data) == "null" {
		o.value = nil
		return nil
	}

	var value time.Time

	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	o.value = &value
	return nil
}
